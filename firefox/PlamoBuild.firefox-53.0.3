#!/bin/sh
unset LS_BLOCK_SIZE
export LANG=C
##############################################################
pkgbase=firefox
vers=53.0.3
url="http://ftp.mozilla.org/pub/mozilla.org/firefox/releases/${vers}/source/${pkgbase}-${vers}.source.tar.xz"
#verify=$url.asc
arch=`uname -m`
build=P1
src=firefox-${vers}
DOCS='LICENSE README.txt other-licenses xpinstall'
patchfiles='firefox.desktop.patch'
compress=txz
##############################################################

echo $PATH

install2() {
  install -d ${2%/*} ; install -m 644 $1 $2
}

strip_bindir() {
  echo "compressing in $1"
  if [ -d $1 ] ; then (
    shopt -s nullglob
    cd $1
    for i in * ; do
      echo "$i"
      if [ -h $i ] ; then continue ; fi
      if [ -n "`file $i | grep "not stripped"`" ] ; then #`
         echo "stripping -p $i"
         strip -p $i
      fi
    done
  ) fi
}

strip_libdir() {
  echo "compressing in $1"
  if [ -d $1 ] ; then (
    shopt -s nullglob
    cd $1
    for i in *.so *.so.* *.a ; do
      echo "$i"
      if [ -h $i ] ; then continue ; fi
      if [ -n "`nm -a $i | grep " a "`" ] ; then #`
        if [ $i != ${i%.a} ] ; then
          echo -n "ranlib and "
          touch -r $i $i.mt ; ranlib $i ; touch -r $i.mt $i ; rm $i.mt
        fi
        echo "stripping -gp $i"
        strip -gp $i
      fi
    done
  ) fi
}

gzip_dir() {
  echo "compressing in $1"
  if [ -d $1 ] ; then (
    cd $1
    files=`ls -f --indicator-style=none | sed '/^\.\{1,2\}$/d'`
    # files=`ls -a --indicator-style=none | tail -n+3`
    for i in $files ; do
      echo "$i"
      if [ ! -f $i -a ! -h $i -o $i != ${i%.gz} ] ; then continue ; fi
      lnks=`ls -l $i | awk '{print $2}'`
      if [ $lnks -gt 1 ] ; then
        inum=`ls -i $i | awk '{print $1}'`
        for j in `find . -maxdepth 1 -inum $inum` ; do
          if [ ${j#./} == $i ] ; then
            gzip -f $i
          else
            rm -f ${j#./} ; ln $i.gz ${j#./}.gz
          fi
        done
      elif [ -h $i ] ; then
        target=`readlink $i` ; rm -f $i ; ln -s $target.gz $i.gz
      else
        gzip $i
      fi
    done
    for i in $files ; do mv ${i%.gz}.gz $C ; done
    for i in $files ; do mv $C/${i%.gz}.gz . ; done
  ) fi
}

gzip_one() {
  gzip $1 ; mv $1.gz $C ; mv $C/${1##*/}.gz ${1%/*}
}

compress() {
  for i in {$P,$P/usr,$P/usr/X11R7}/{sbin,bin} ; do strip_bindir $i ; done
  for i in {$P,$P/usr,$P/usr/X11R7}/lib ; do strip_libdir $i ; done
  for i in {$P,$P/usr,$P/usr/X11R7}/lib64 ; do strip_libdir $i ; done
  if [ -f $infodir/dir ] ; then rm -f $infodir/dir ; fi
  gzip_dir $infodir
  for i in `seq 9` n ; do gzip_dir $mandir/man$i ; done
  for i in `seq 9` n ; do gzip_dir $xmandir/man$i ; done
}

prune_symlink() {
  echo "pruning symlink in $1"
  if [ -d $1 ] ; then (
    cd $P
    rm -f /tmp/iNsT-a.$$ ; touch /tmp/iNsT-a.$$
    for i in `find ${1#$P/} -type l` ; do
      target=`readlink $i`
      echo "$i -> $target"
      echo $i$'
'$target >> /tmp/iNsT-a.$$
    done
    COUNT=1
    LINE=`sed -n "${COUNT}p" /tmp/iNsT-a.$$`
    while [ -n "$LINE" ] ; do
      LINKGOESIN=`dirname $LINE`
      LINKNAMEIS=`basename $LINE`
      COUNT=$(($COUNT + 1))
      LINKPOINTSTO=`sed -n "${COUNT}p" /tmp/iNsT-a.$$`
      if [ ! -d install ] ; then mkdir install ; fi
      cat <<- EOF >> install/doinst.sh
	( cd $LINKGOESIN ; rm -rf $LINKNAMEIS )
	( cd $LINKGOESIN ; ln -sf $LINKPOINTSTO $LINKNAMEIS )
	EOF
      rm -rf $LINE ; touch -t `date '+%m%d0900'` install/doinst.sh $LINE
      COUNT=$(($COUNT + 1))
      LINE=`sed -n "${COUNT}p" /tmp/iNsT-a.$$`
    done
    rm -f /tmp/iNsT-a.$$
  ) fi
}

convert() {
  for i in {$P,$P/usr}/{sbin,bin} ; do prune_symlink $i ; done
  for i in {$P,$P/usr}/lib ; do prune_symlink $i ; done
  for i in {$P,$P/usr}/lib64 ; do prune_symlink $i ; done
  prune_symlink $infodir
  for i in `seq 9` n ; do prune_symlink $mandir/man$i ; done
}

verify_checksum() {
  echo "Verify Checksum..."
  checksum_command=$1
  verify_file=${verify##*/}
  for s in $url ; do
    srcsum=`$checksum_command ${s##*/}`
    verifysum=`grep ${s##*/} $verify_file`
    if [ x"$srcsum" != x"$verifysum" ]; then
      exit 1
    fi
  done
  exit 0
}

update_gcc() {
  GCC5PKGDIR="ftp://plamo.linet.gr.jp/pub/Plamo-test/for-6.x/${arch}/GCC"
  GCC5VER="5.3.0"
  for p in gcc g++
  do
    GCC5PKG="${p}-${GCC5VER}-${arch}-P1.txz"
    wget $GCC5PKGDIR/$GCC5PKG
    sudo updatepkg -f $GCC5PKG
  done
}

revert_gcc() {
  GCC4PKGDIR="http://repository.plamolinux.org/pub/linux/Plamo/Plamo-6.x/x86_64/plamo/01_minimum/devel.txz"
  GCC4VER="4.8.5"
  GCC4REV="3"
  for p in gcc g++
  do
    GCC4PKG="${p}-${GCC4VER}-${arch}-P${GCC4REV}.txz"
    #wget $GCC4PKGDIR/$GCC4PKG
    #sudo updatepkg -f $GCC4PKG
  done
}

W=`pwd`
for i in `seq 0 $((${#src[@]} - 1))` ; do
  S[$i]=$W/${src[$i]} 
  if [ $arch = "x86_64" ]; then
      B[$i]=$W/build`test ${#src[@]} -eq 1 || echo $i`
  else
      B[$i]=$W/build32`test ${#src[@]} -eq 1 || echo $i`
  fi      
done
P=$W/work ; C=$W/pivot
infodir=$P/usr/share/info
mandir=$P/usr/share/man
xmandir=$P/usr/X11R7/share/man
docdir=$P/usr/share/doc
myname=`basename $0`
pkg=$pkgbase-$vers-$arch-$build

if [ $arch = "x86_64" ]; then
    target="-m64"
    libdir="lib64"
else
    target="-m32"
    libdir="lib"
fi

if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
  for i in $url ; do
    if [ ! -f ${i##*/} ] ; then wget $i ; fi
  done
  for i in $verify ; do
    if [ ! -f ${i##*/} ] ; then
      wget $i
    fi
  done
  for i in $verify ; do
    case ${i##*.} in
    asc) gpg2 --verify ${i##*/} ;;
    sig) gpg2 --verify ${i##*/} ;;
    sha256sum) verify_checksum "sha256sum" ;;
    esac
    if [ $? -ne 0 ]; then
      echo "archive verify was failed."
      exit 1
    else
      echo "archive verify was successed."
    fi
  done
  for i in $url ; do
    case ${i##*.} in
    tar) tar xvpf ${i##*/} ;;
    gz) tar xvpzf ${i##*/} ;;
    bz2) tar xvpjf ${i##*/} ;;
    *) tar xvpf ${i##*/} ;;
    esac
  done
fi
if [ -x /usr/bin/ccache ]; then
  GCC="ccache gcc"
  GPP="ccache g++"
else
  GCC="gcc"
  GPP="g++"
fi

check_rust()
{
    rust_path=$(dirname $(which rustc))
    if [ $? -ne 0 ]; then
	echo "You need rust."
	echo "You have to exec curl https://sh.rustup.rs -sSf | sh"
	exit 1
    fi
}

#check_rust

if [ $opt_config -eq 1 ] ; then
  update_gcc
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    if [ -d ${B[$i]} ] ; then rm -rf ${B[$i]} ; fi ; cp -a ${S[$i]} ${B[$i]}
  done
######################################################################
# * ./configure を行う前に適用したい設定やパッチなどがある場合はここに
#   記述します。
######################################################################
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    #mkdir $W/obj
    cd ${B[$i]}
    for patch in $patchfiles ; do
       patch -p1 < $W/$patch
    done

    hg -v clone http://hg.mozilla.org/releases/l10n/mozilla-release/ja/
    ( cd ja ; hg update default )
    if [ ! -d ../l10n ]; then
      mkdir ../l10n
    else
      rm -rf ../l10n/*
    fi
    mv ja ../l10n/

#    if [ -f autogen.sh ] ; then
#      sh ./autogen.sh
#    fi

    # configure script misdetects the preprocessor without an optimization level
    sed -i '/ac_cpp=/s/$CPPFLAGS/& -O2/' configure

    cat > mozconfig <<EOF
## Project
. ${B[$i]}/browser/config/mozconfig
export MOZILLA_OFFICIAL=0
CC="gcc"
CXX="g++"

mk_add_options MOZ_MAKE_FLAGS="-j3"
ac_add_options --enable-strip
ac_add_options --disable-install-strip

ac_add_options --enable-default-toolkit=cairo-gtk3

## Directory
ac_add_options --prefix=/usr
ac_add_options --libdir=/usr/${libdir}

## System Library
ac_add_options --with-system-nspr
ac_add_options --with-system-nss
# jpeg-turbo
ac_add_options --with-system-jpeg
ac_add_options --with-system-zlib
ac_add_options --with-system-bz2
# libpng-1.6
ac_add_options --with-system-png
ac_add_options --with-system-libevent
# libvpx-1.3 is too old
#ac_add_options --with-system-libvpx
#ac_add_options --enable-system-hunspell
ac_add_options --enable-system-sqlite
ac_add_options --enable-system-ffi
ac_add_options --enable-system-pixman
ac_add_options --with-pthreads

## Features
ac_add_options --enable-safe-browsing
ac_add_options --enable-startup-notification
#ac_add_options --enable-gio
#ac_add_options --enable-webm
#ac_add_options --disable-dbus
ac_add_options --disable-necko-wifi
#ac_add_options --enable-canvas
ac_add_options --enable-pulseaudio
ac_add_options --enable-pie
#ac_add_options --enable-rust
# disable feature
#ac_add_options --disable-gnomevfs
#ac_add_options --disable-gnomeui
ac_add_options --disable-crashreporter
ac_add_options --disable-updater
ac_add_options --disable-tests

## Branding
ac_add_options --with-branding=browser/branding/unofficial

## Japanese
ac_add_options --with-l10n-base=${B[$i]}/../l10n
ac_add_options --enable-ui-locale=ja
EOF

  done
fi
if [ $opt_build -eq 1 ] ; then
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    export LDFLAGS='-Wl,--as-needed'
    export CFLAGS="-isystem /usr/include ${target}"
    export CPPFLAGS="-isystem /usr/include ${target}"
    export MOZ_MAKE_FLAGS="-j3"
    make -f client.mk build
  done
fi
if [ $opt_package -eq 1 ] ; then
  if [ `id -u` -ne 0 ] ; then
    read -p "Do you want to package as root? [y/N] " ans
    if [ "x$ans" == "xY" -o "x$ans" == "xy" ] ; then
	#cd $W ; /bin/su -c "$0 package" ; exit
	sudo -E PATH=$rust_path:$PATH sh -x $0 package ; exit 0
    fi
  fi
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  if [ -d $C ] ; then rm -rf $C ; fi ; mkdir -p $C
  touch $W/i.st ; sleep 1
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    #cd $W/obj
    cd ${B[$i]}
    for mk in `find . -name "[Mm]akefile" ` ; do
        sed -i -e 's|GCONFTOOL = /usr/bin/gconftool-2|GCONFTOOL = echo|' $mk
    done
    export LDFLAGS='-Wl,--as-needed'
    #export MOZ_OBJDIR=$W/obj
    #make -f client.mk install DESTDIR=$P INSTALL_SDK=install
    #make install DESTDIR=$P
    install -v -m755 -d $P/usr/${libdir}/mozilla/plugins
  done
######################################################################
# * make install でコピーされないファイルがある場合はここに記述します。
######################################################################
  cat <<EOF > $P/usr/bin/firefox
LD_LIBRARY_PATH=/usr/${libdir}/firefox-${vers}
/usr/${libdir}/firefox-${vers}/firefox \$@
EOF
  cp /usr/$libdir/$(readlink /usr/${libdir}/libstdc++.so.6) $P/usr/${libdir}/firefox-${vers}/libstdc++.so.6
  if [ -d $P/usr/share/omf ]; then
      mkdir -p $P/install
      for omf in $P/usr/share/omf/* ; do
	omf_name=`basename $omf`
	cat << EOF >> $P/install/initpkg
if [ -x /usr/bin/scrollkeeper-update ]; then
    scrollkeeper-update -p /var/lib/rarian -o /usr/share/omf/$omf_name
fi
EOF
      done
  fi

  if [ -d $P/etc/gconf/schemas ]; then
      mkdir -p $P/install
      for schema in $P/etc/gconf/schemas/* ; do
          cat << EOF >> $P/install/initpkg
if [ -x /usr/bin/gconftool-2 ]; then
    ( cd /etc/gconf/schemas ; GCONF_CONFIG_SOURCE=xml:merged:/etc/gconf/gconf.xml.defaults /usr/bin/gconftool-2 --makefile-install-rule `basename $schema` )
fi
EOF
      done
  fi

# remove locales except ja
# 
  if [ -d $P/usr/share/locale ]; then
    pushd $P/usr/share/locale  
    for loc in * ; do
        if [ "$loc" != "ja" ]; then
            rm -rf $P/usr/share/locale/$loc
        fi
    done
    popd
  fi

  touch $W/i.et
  cd $W
  find $P ! -type l -newer i.st ! -newer i.et       -exec touch -t `date '+%m%d0900'` {} \;
  compress
######################################################################
# * compress 対象以外で圧縮したいディレクトリやファイルがある場合はここ
#   に記述します(strip_{bin,lib}dir や gzip_{dir,one} を使います)。
# * 他のアーカイブから追加したいファイルがある場合はここに記述します。
######################################################################
  for i in `seq 0 $((${#DOCS[@]} - 1))` ; do
    for j in ${DOCS[$i]} ; do
      for k in ${S[$i]}/$j ; do
        install2 $k $docdir/${src[$i]}/${k#${S[$i]}/}
        touch -r $k $docdir/${src[$i]}/${k#${S[$i]}/}
        gzip_one $docdir/${src[$i]}/${k#${S[$i]}/}
      done
    done
    if [ $i -eq 0 ] ; then
      install $myname $docdir/$src
      touch -t `date '+%m%d0900'` $docdir/$src/$myname
      gzip_one $docdir/$src/$myname
    else
      ln $docdir/$src/$myname.gz $docdir/${src[$i]}
    fi
    ( cd $docdir ; find ${src[$i]} -type d -exec touch -r $W/{} {} \; )
  done

  for patch in $patchfiles ; do
      cp $W/$patch $docdir/$src/$patch
      gzip_one $docdir/$src/$patch
  done
######################################################################
# * ドキュメントツリーの調整が必要な場合はここに記述します。
######################################################################
  mv $docdir/$src $docdir/$pkgbase-$vers
  install2 $W/build/firefox.desktop $P/usr/share/applications/
#  ln -s $P/usr/${libdir}/$pkgbase-$vers $P/usr/${libdir}/$pkgbase
mkdir -p $P/install
cat << EOF >> $P/install/initpkg
ln -sf /usr/${libdir}/$pkgbase-$vers /usr/${libdir}/$pkgbase
EOF
  convert
############################################################
#   /usr/share/doc 以下には一般ユーザのIDのままのファイルが
#   紛れこみがちなので
############################################################
  chk_me=`whoami | grep root`
  if [ "$chk_me.x" != ".x" ]; then
      chown -R root.root $P/usr/share $P/usr/include $P/usr/${libdir}
  fi
######################################################################
# * convert 対象以外で刈り取りたいシンボリックリンクがある場合はここに
#   記述します(prune_symlink を使います)。
# * 完成した作業ディレクトリから tar イメージを作成する手順を以降に記述
#   します(こだわりを求めないなら単に makepkg でも良いです)。
######################################################################
# tar cvpf $pkg.tar -C $P `cd $P ; find usr/bin | tail -n+2`
# tar rvpf $pkg.tar -C $P `cd $P ; find usr/share/man/man1 | tail -n+2`
# tar rvpf $pkg.tar -C $P usr/share/doc/$src
# touch -t `date '+%m%d0900'` $pkg.tar ; gzip $pkg.tar ; touch $pkg.tar.gz
# mv $pkg.tar.gz $pkg.tgz
  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

  revert_gcc

fi


