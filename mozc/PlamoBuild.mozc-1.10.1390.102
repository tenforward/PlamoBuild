#!/bin/sh
##############################################################
url='https://mozc.googlecode.com/files/mozc-1.10.1390.102.tar.bz2'
sha1sum='d6ae2cf93eeecad93565f4bb9b51a32ce94ac9d6'
verify=
pkgbase=mozc
vers=1.10.1390.102
arch=x86_64
# arch=i586
build=P1
src=mozc-1.10.1390.102
OPT_CONFIG=''
DOCS='mozc_version.txt mozc_version_template.txt'
patchfiles=''
compress=txz
##############################################################

install2() {
  install -d ${2%/*} ; install -m 644 $1 $2
}

strip_all() {
  for chk in `find . ` ; do
    chk_elf=`file $chk | grep ELF`
    if [ "$chk_elf.x" != ".x" ]; then
      chk_lib=`echo $chk | grep lib`
      if [ "$chk_lib.x" != ".x" ]; then
         echo "stripping $chk with -g "
         strip -g $chk
      else
         echo "stripping $chk"
         strip $chk
      fi
    fi
  done
}

gzip_dir() {
  echo "compressing in $1"
  if [ -d $1 ] ; then (
    cd $1
    files=`ls -f --indicator-style=none | sed '/^\.\{1,2\}$/d'`
    # files=`ls -a --indicator-style=none | tail -n+3`
    for i in $files ; do
      echo "$i"
      if [ ! -f $i -a ! -h $i -o $i != ${i%.gz} ] ; then continue ; fi
      lnks=`ls -l $i | awk '{print $2}'`
      if [ $lnks -gt 1 ] ; then
        inum=`ls -i $i | awk '{print $1}'`
        for j in `find . -maxdepth 1 -inum $inum` ; do
          if [ ${j#./} == $i ] ; then
            gzip -f $i
          else
            rm -f ${j#./} ; ln $i.gz ${j#./}.gz
          fi
        done
      elif [ -h $i ] ; then
        target=`readlink $i` ; rm -f $i ; ln -s $target.gz $i.gz
      else
        gzip $i
      fi
    done
    for i in $files ; do mv ${i%.gz}.gz $C ; done
    for i in $files ; do mv $C/${i%.gz}.gz . ; done
  ) fi
}

gzip_one() {
  gzip $1 ; mv $1.gz $C ; mv $C/${1##*/}.gz ${1%/*}
}

compress_all() {
  cd $P
  strip_all
}  

verify_checksum() {
  echo "Verify Checksum..."
  checksum_command=$1
  verify_file=${verify##*/}
  for s in $url ; do
    srcsum=`$checksum_command ${s##*/}`
    verifysum=`grep ${s##*/} $verify_file`
    if [ x"$srcsum" != x"$verifysum" ]; then
      exit 1
    fi
  done
  exit 0
}

W=`pwd`
for i in `seq 0 $((${#src[@]} - 1))` ; do
  S[$i]=$W/${src[$i]} 
  if [ $arch = "x86_64" ]; then
      B[$i]=$W/build`test ${#src[@]} -eq 1 || echo $i`
  else
      B[$i]=$W/build32`test ${#src[@]} -eq 1 || echo $i`
  fi      
done
P=$W/work ; C=$W/pivot
infodir=$P/usr/share/info
mandir=$P/usr/share/man
xmandir=$P/usr/X11R7/share/man
docdir=$P/usr/share/doc
myname=`basename $0`
pkg=$pkgbase-$vers-$arch-$build

if [ $arch = "x86_64" ]; then
  target="-m64"
  libdir="lib64"
  suffix="64"
else
  target="-m32"
  libdir="lib"
  suffix=""
fi

if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
  for i in $url ; do
    if [ ! -f ${i##*/} ] ; then
      echo -n "Downloading $i: "
      wget $i
      echo -n "done."
    fi
  done
  for i in $verify ; do
    if [ ! -f ${i##*/} ] ; then
      wget $i
    fi
  done
  echo -n "Downloading depot_tools: "
  svn -q co http://src.chromium.org/svn/trunk/tools/depot_tools
  export PATH="$PATH":`pwd`/depot_tools
  echo "done."
  echo -n "Downloading protobuf: "
  svn -q co --ignore-externals http://protobuf.googlecode.com/svn/trunk@486 $pkgbase-$vers/protobuf/files
  echo "done."
  for i in $verify ; do
    case ${i##*.} in
    asc) gpg2 --verify ${i##*/} ;;
    sig) gpg2 --verify ${i##*/} ;;
    sha256sum) verify_checksum "sha256sum" ;;
    esac
    if [ $? -ne 0 ]; then
      echo "archive verify was failed."
      exit 1
    else
      echo "archive verify was successed."
    fi
  done
  archivesum=`sha1sum ${url##*/} | awk '{ print $1 }'`
  if [ x"${sha1sum}" = x"${archivesum}" ] ; then
      echo "archive verify was successed."
  else
      echo "archive verify was failed."
      exit 1
  fi
  echo -n "Extracting archive: "
  for i in $url ; do
    case ${i##*.} in
    gz) tar xpzf ${i##*/} ;;
    bz2) tar xpjf ${i##*/} ;;
    *) tar xpf ${i##*/} ;;
    esac
  done
  echo "done."
fi

if [ $opt_config -eq 1 ] ; then
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    if [ -d ${B[$i]} ] ; then rm -rf ${B[$i]} ; fi ; cp -a ${S[$i]} ${B[$i]}
  done
######################################################################
# * ./configure を行う前に適用したい設定やパッチなどがある場合はここに
#   記述します。
######################################################################
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    for patch in $patchfiles ; do
       patch -p1 < $W/$patch
   done

    # if [ -f autogen.sh ] ; then
    #   sh ./autogen.sh
    # fi

    export PATH="$PATH":`pwd`/depot_tools

    echo "Generating Makefiles by gyp: start."
    python build_mozc.py gyp --server_dir="/usr/${libdir}/mozc"
    echo "Generating Makefiles by gyp: done."

    echo "Building Code Generation tools: start."
    python build_mozc.py build_tools -c Release
    echo "Building Code Generation tools: done."

  done
fi
if [ $opt_build -eq 1 ] ; then
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    export PATH="$PATH":`pwd`/depot_tools

    # 2013/06/19 現在，/usr/lib64/pkgconfig/QtGui.pc 内の Qt 関連の実行ファイルのパスを変更しないと
    # エラーになる (exec_prefix, uic_location 等)
    python build_mozc.py build -c Release unix/ibus/ibus.gyp:ibus_mozc unix/emacs/emacs.gyp:mozc_emacs_helper server/server.gyp:mozc_server gui/gui.gyp:mozc_tool renderer/renderer.gyp:mozc_renderer

    pushd unix/emacs
    emacs -batch -f batch-byte-compile mozc.el
    popd

  done
fi
if [ $opt_package -eq 1 ] ; then
  if [ `id -u` -ne 0 ] ; then
    read -p "Do you want to package as root? [y/N] " ans
    if [ "x$ans" == "xY" -o "x$ans" == "xy" ] ; then
      cd $W ; /bin/su -c "$0 package" ; exit
    fi
  fi
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  if [ -d $C ] ; then rm -rf $C ; fi ; mkdir -p $C
  touch $W/i.st ; sleep 1
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}

    OUTDIR="out_linux/Release"

    # mozc
    install -D -m 755 $OUTDIR/mozc_server $P/usr/${libdir}/mozc/mozc_server
    install    -m 755 $OUTDIR/mozc_tool $P/usr/${libdir}/mozc/mozc_tool
    install -d -m 755 $P/usr/${libdir}/mozc/documents/
    install -m 644 data/installer/*.html $P/usr/${libdir}/mozc/documents/

    # ibus-mozc
    install -D -m 755 $OUTDIR/ibus_mozc $P/usr/libexec/ibus-engine-mozc
    install -D -m 644 $OUTDIR/obj/gen/unix/ibus/mozc.xml $P/usr/share/ibus/component/mozc.xml
    install -D -m 644 data/images/unix/ime_product_icon_opensource-32.png $P/usr/share/ibus-mozc/product_icon.png
    install -m 644 data/images/unix/ui-tool.png          $P/usr/share/ibus-mozc/tool.png
    install -m 644 data/images/unix/ui-properties.png    $P/usr/share/ibus-mozc/properties.png
    install -m 644 data/images/unix/ui-dictionary.png    $P/usr/share/ibus-mozc/dictionary.png
    install -m 644 data/images/unix/ui-direct.png        $P/usr/share/ibus-mozc/direct.png
    install -m 644 data/images/unix/ui-hiragana.png      $P/usr/share/ibus-mozc/hiragana.png
    install -m 644 data/images/unix/ui-katakana_half.png $P/usr/share/ibus-mozc/katakana_half.png
    install -m 644 data/images/unix/ui-katakana_full.png $P/usr/share/ibus-mozc/katakana_full.png
    install -m 644 data/images/unix/ui-alpha_half.png    $P/usr/share/ibus-mozc/alpha_half.png
    install -m 644 data/images/unix/ui-alpha_full.png    $P/usr/share/ibus-mozc/alpha_full.png
    install -m 755 $OUTDIR/mozc_renderer $P/usr/${libdir}/mozc/mozc_renderer

    # emacs-mozc
    install -D -m 755 $OUTDIR/mozc_emacs_helper $P/usr/bin/mozc_emacs_helper
    install -d -m 755 $P/usr/share/emacs/site-lisp/emacs-mozc/
    install -D -m 644 unix/emacs/mozc.el{,c} $P/usr/share/emacs/site-lisp/emacs-mozc/
    install -D -m 644 $W/mozc-el_el $P/etc/template/.emacs.d/site-start.d/mozc-el_el

  done
######################################################################
# * make install でコピーされないファイルがある場合はここに記述します。
######################################################################
  mkdir -p $docdir/$src
  if [ -d $P/usr/share/omf ]; then
    mkdir -p $P/install
    for omf in $P/usr/share/omf/* ; do
      omf_name=`basename $omf`
      cat << EOF >> $P/install/initpkg
if [ -x /usr/bin/scrollkeeper-update ]; then
  scrollkeeper-update -p /var/lib/rarian -o /usr/share/omf/$omf_name
fi
EOF
    done
  fi

  if [ -d $P/etc/gconf/schemas ]; then
    mkdir -p $P/install
    for schema in $P/etc/gconf/schemas/* ; do
      cat << EOF >> $P/install/initpkg
if [ -x /usr/bin/gconftool-2 ]; then
    ( cd /etc/gconf/schemas ; GCONF_CONFIG_SOURCE=xml:merged:/etc/gconf/gconf.xml.defaults /usr/bin/gconftool-2 --makefile-install-rule `basename $schema` )
fi
EOF
    done
  fi

# remove locales except ja
# 
  for loc_dir in `find $P -name locale` ; do
    pushd $loc_dir
    for loc in * ; do
      if [ "$loc" != "ja" ]; then
        rm -rf $loc
      fi
    done
    popd
  done      

######################################################################
# path に lib があるバイナリは strip -g, ないバイナリは strip する
######################################################################
  cd $P
  compress_all
  if [ -d $P/usr/share/man ]; then
    for mdir in `find $P/usr/share/man -name man[0-9mno] -type d`; do
      gzip_dir $mdir
    done
  fi
######################################################################
# * compress 対象以外で圧縮したいディレクトリやファイルがある場合はここ
#   に記述します(strip_{bin,lib}dir や gzip_{dir,one} を使います)。
# * 他のアーカイブから追加したいファイルがある場合はここに記述します。
######################################################################
  cd $W
  for i in `seq 0 $((${#DOCS[@]} - 1))` ; do
    for j in ${DOCS[$i]} ; do
      for k in ${S[$i]}/$j ; do
        install2 $k $docdir/${src[$i]}/${k#${S[$i]}/}
        touch -r $k $docdir/${src[$i]}/${k#${S[$i]}/}
        gzip_one $docdir/${src[$i]}/${k#${S[$i]}/}
      done
    done
    if [ $i -eq 0 ] ; then
      install $myname $docdir/$src
      gzip_one $docdir/$src/$myname
    else
      ln $docdir/$src/$myname.gz $docdir/${src[$i]}
    fi
    ( cd $docdir ; find ${src[$i]} -type d -exec touch -r $W/{} {} \; )
  done

  for patch in $patchfiles ; do
    cp $W/$patch $docdir/$src/$patch
    gzip_one $docdir/$src/$patch
  done

############################################################
#   /usr/share/doc 以下には一般ユーザのIDのままのファイルが
#   紛れこみがちなので
############################################################

  chk_me=`whoami | grep root`
  if [ "$chk_me.x" != ".x" ]; then
      chown -R root.root $P/usr/share/doc
  fi

######################################################################
# * convert 対象以外で刈り取りたいシンボリックリンクがある場合はここに
#   記述します(prune_symlink を使います)。
# * 完成した作業ディレクトリから tar イメージを作成する手順を以降に記述
#   します(こだわりを求めないなら単に makepkg でも良いです)。
######################################################################
# tar cvpf $pkg.tar -C $P `cd $P ; find usr/bin | tail -n+2`
# tar rvpf $pkg.tar -C $P `cd $P ; find usr/share/man/man1 | tail -n+2`
# tar rvpf $pkg.tar -C $P usr/share/doc/$src
# touch -t `date '+%m%d0900'` $pkg.tar ; gzip $pkg.tar ; touch $pkg.tar.gz
# mv $pkg.tar.gz $pkg.tgz
  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

fi
