#!/bin/bash
## chromium ##################################################
pkgbase='chromium'
vers='55.0.2883.87'
url="http://commondatastorage.googleapis.com/chromium-browser-official/chromium-${vers}.tar.xz"
arch=`uname -m`
build=P1
src="${pkgbase}-${vers}"
OPT_CONFIG='--disable-static --enable-shared'
DOCS='AUTHORS LICENSE LICENSE.chromium_os'
patchfiles='chromium-52.0.2743.116-unset-madv_free.patch chromium-system-ffmpeg-r4.patch plamo-heimdal.patch chromium-widevine.patch gcc-issue.patch'
compress=txz
# Google API keys (see http://www.chromium.org/developers/how-tos/api-keys)
# These are used for Plamo Linux (local build by @ten_forward)
_google_api_key=AIzaSyBMnl2_RIwCCDNC6IR1CE8kZyrZn9tFYf0
_google_default_client_id=412908399046-btd2ilin3sq0prc7f4e36ab1kaff10u1.apps.googleusercontent.com
_google_default_client_secret=ZFiNjiYDmHQzvBHUNSy2nmQz 
##############################################################

## launcher ##################################################
l_vers="3"
l_url="https://github.com/foutrelis/chromium-launcher/archive/v${l_vers}.tar.gz"
l_src="chromium-launcher-${l_vers}"
##############################################################

source /usr/share/plamobuild_functions.sh

if [ $arch = "x86_64" ]; then
  libdir="lib64"
else
  libdir="lib"
fi

B=$W/build
l_B=$W/launcher_build

declare -rgA _system_libs=(
  [flac]=flac
  [libjpeg]=libjpeg
  [libpng]=libpng
  [libwebp]=libwebp
  [libxslt]=libxslt
  [yasm]=
)

export CFLAGS="-isystem /usr/include -m64 -I/usr/heimdal/include -O1"
export LDFLAGS="-L/usr/heimdal/$libdir"

config() {
  if [ -d $B ] ; then rm -rf $B ; fi ; cp -a $S $B
  cd $B
  for patch in $patchfiles ; do
    patch -p1 < $W/$patch
  done

  local _lib
  for _lib in ${!_system_libs[@]} ${_system_libs[libjpeg]+libjpeg_turbo}; do
    find -type f -path "*third_party/$_lib/*" \
      \! -path "*third_party/$_lib/chromium/*" \
      \! -path "*third_party/$_lib/google/*" \
      \! -path "*base/third_party/icu/*" \
      \! -regex '.*\.\(gn\|gni\|isolate\|py\)' \
      -delete
  done

  python2 build/linux/unbundle/replace_gn_files.py \
          --system-libraries "${!_system_libs[@]}"

  python2 third_party/libaddressinput/chromium/tools/update-strings.py
}

build() {
  cd $B

  export TMPDIR=$W/tmp
  mkdir -p $TMPDIR

  local _flags=(
    'is_clang=false'
    'clang_use_chrome_plugins=false'
    'symbol_level=0'
    'is_debug=false'
    'fatal_linker_warnings=false'
    'treat_warnings_as_errors=false'
    'fieldtrial_testing_like_official_build=true'
    'remove_webcore_debug_symbols=true'
    'ffmpeg_branding="Chrome"'
    'proprietary_codecs=true'
    'link_pulseaudio=true'
    'linux_use_bundled_binutils=false'
    'use_cups=true'
    'use_gconf=false'
    'use_gnome_keyring=false'
    'use_gold=false'
    'use_gtk3=false'
    'use_kerberos=true'
    'use_pulseaudio=true'
    'use_sysroot=false'
    'enable_hangout_services_extension=true'
    'enable_widevine=true'
    'enable_nacl=false'
    'enable_nacl_nonsfi=false'
    "google_api_key=\"${_google_api_key}\""
    "google_default_client_id=\"${_google_default_client_id}\""
    "google_default_client_secret=\"${_google_default_client_secret}\""
  )

  set -x
  python2 tools/gn/bootstrap/bootstrap.py --gn-gen-args "${_flags[*]}"
  out/Release/gn gen out/Release --args="${_flags[*]}" \
    --script-executable=/usr/bin/python2

  ninja -C out/Release chrome chrome_sandbox chromedriver widevinecdmadapter
  set +x
}

install_to_work() {
  release="out/Release"
  instdir="/usr/${libdir}/chromium"
  install -D $release/chrome $P/$instdir/chromium
  install -Dm644 $release/chrome.1 $P/usr/share/man/man1/chromium.1
  install -Dm644 $W/chromium.desktop $P/usr/share/applications/chromium.desktop

  install -Dm4755 $release/chrome_sandbox $P/$instdir/chrome-sandbox

  cp out/Release/*.pak $P/$instdir/
  cp out/Release/*.bin $P/$instdir/
  install -D $release/chromedriver $P/$instdir/chromedriver
  install -D $release/libwidevinecdmadapter.so $P/$instdir/libwidevinecdmadapter.so
  cp -a $release/locales $P/$instdir/
  install -D $release/gen/content/content_resources.pak $P/$instdir/content_resources.pak

  ln -s $instdir/chromedriver $P/usr/bin/chromedriver

  for size in 22 24 48 64 128 256; do
    install -Dm644 "chrome/app/theme/chromium/product_logo_$size.png" \
            "$P/usr/share/icons/hicolor/${size}x${size}/apps/chromium.png"
  done

  for size in 16 32; do
    install -Dm644 "chrome/app/theme/default_100_percent/chromium/product_logo_$size.png" \
            "$P/usr/share/icons/hicolor/${size}x${size}/apps/chromium.png"
  done

}

launcher_config() {
  if [ -d $l_B ] ; then rm -rf $l_B ; fi ; cp -a $W/$l_src $l_B
  cd $l_B
  if [ $arch = "x86_64" ]; then
    sed -i 's|/lib|/lib64|g' Makefile
  fi
}

launcher_build() {
  cd $l_B
  make PREFIX=/usr
}

launcher_install_to_work() {
  cd $l_B
  rm -f $P/usr/bin/chromium
  make PREFIX=/usr DESTDIR=$P install-strip
}

# このスクリプトで使う1文字変数の意味
# 
# $W : このスクリプトを動かすカレントディレクトリ
# $S : ソースコードのあるディレクトリ(デフォルト: $W/${src})
# $B : ビルド用ディレクトリ(デフォルト: /tmp/build{,32})
# $P : ビルドしたファイルをインストールするディレクトリ（デフォルト: $W/work)


if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
  #download_sources
  if [ -f ${l_url##*/} ]; then
    wget $l_url
    tar xvf ${l_url##*/}
  fi
fi

if [ $opt_config -eq 1 ] ; then
  #config
  launcher_config
fi

if [ $opt_build -eq 1 ] ; then

  # chromium
  cd $B
  build
  if [ $? != 0 ]; then
    echo "build error. $0 script stop"
    exit 255
  fi

  # chromium-launcher
  cd $l_B
  launcher_build
  if [ $? != 0 ]; then
    echo "build error. $0 script stop"
    exit 255
  fi
fi

if [ $opt_package -eq 1 ] ; then
  check_root
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  cd $B
  install_to_work
  launcher_install_to_work
################################
#      install tweaks
#  strip binaries, delete locale except ja, compress man, 
#  install docs and patches, compress them and  chown root.root
################################
  install_tweak

#############################
#   convert symlink to null file and 
#   add "ln -sf" command into install/doinst.sh
################################
  convert_links

  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

fi
