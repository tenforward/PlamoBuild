#!/bin/sh
##############################################################
url='http://commondatastorage.googleapis.com/chromium-browser-official/chromium-35.0.1916.114.tar.xz'
#verify=$url.sig
pkgbase=chromium
vers=35.0.1916.114
arch=`uname -m | sed -e 's/i.86/i586/'`
build=P1
src=chromium-${vers}
OPT_CONFIG=''
DOCS='AUTHORS LICENSE LICENSE.chromium_os'
patchfiles=''
compress=txz
##############################################################

install2() {
  install -d ${2%/*} ; install -m 644 $1 $2
}

strip_all() {
  for chk in `find . ` ; do
    chk_elf=`file $chk | grep ELF`
    if [ "$chk_elf.x" != ".x" ]; then
      chk_lib=`echo $chk | grep lib`
      if [ "$chk_lib.x" != ".x" ]; then
         echo "stripping $chk with -g "
         strip -g $chk
      else
         echo "stripping $chk"
         strip $chk
      fi
    fi
  done
}

gzip_dir() {
  echo "compressing in $1"
  if [ -d $1 ] ; then (
    cd $1
    files=`ls -f --indicator-style=none | sed '/^\.\{1,2\}$/d'`
    # files=`ls -a --indicator-style=none | tail -n+3`
    for i in $files ; do
      echo "$i"
      if [ ! -f $i -a ! -h $i -o $i != ${i%.gz} ] ; then continue ; fi
      lnks=`ls -l $i | awk '{print $2}'`
      if [ $lnks -gt 1 ] ; then
        inum=`ls -i $i | awk '{print $1}'`
        for j in `find . -maxdepth 1 -inum $inum` ; do
          if [ ${j#./} == $i ] ; then
            gzip -f $i
          else
            rm -f ${j#./} ; ln $i.gz ${j#./}.gz
          fi
        done
      elif [ -h $i ] ; then
        target=`readlink $i` ; rm -f $i ; ln -s $target.gz $i.gz
      else
        gzip $i
      fi
    done
    for i in $files ; do mv ${i%.gz}.gz $C ; done
    for i in $files ; do mv $C/${i%.gz}.gz . ; done
  ) fi
}

gzip_one() {
  gzip $1 ; mv $1.gz $C ; mv $C/${1##*/}.gz ${1%/*}
}

compress_all() {
  cd $P
  strip_all
}  

verify_checksum() {
  echo "Verify Checksum..."
  checksum_command=$1
  verify_file=${verify##*/}
  for s in $url ; do
    srcsum=`$checksum_command ${s##*/}`
    verifysum=`grep ${s##*/} $verify_file`
    if [ x"$srcsum" != x"$verifysum" ]; then
      exit 1
    fi
  done
  exit 0
}

W=`pwd`
for i in `seq 0 $((${#src[@]} - 1))` ; do
  S[$i]=$W/${src[$i]} 
  if [ $arch = "x86_64" ]; then
      B[$i]=$W/build`test ${#src[@]} -eq 1 || echo $i`
  else
      B[$i]=$W/build32`test ${#src[@]} -eq 1 || echo $i`
  fi      
done
P=$W/work ; C=$W/pivot
infodir=$P/usr/share/info
mandir=$P/usr/share/man
xmandir=$P/usr/X11R7/share/man
docdir=$P/usr/share/doc
myname=`basename $0`
pkg=$pkgbase-$vers-$arch-$build

if [ $arch = "x86_64" ]; then
  target="-m64"
  libdir="lib64"
  suffix="64"
  TARGETARCH="x64"
  BUILDCFLAGS="-isystem /usr/include -m64 -I/usr/heimdal/include -O1"
  BUILDLDFLAGS="-L/usr/heimdal/lib64"
else
  target="-m32"
  libdir="lib"
  suffix=""
  TARGETARCH="ia32"
  BUILDCFLAGS="-isystem /usr/include -m32 -I/usr/heimdal/include -O1"
  BUILDLDFLAGS="-L/usr/heimdal/lib"
fi

if [ $# -eq 0 ] ; then
  opt_download=0 ; opt_config=1 ; opt_build=1 ; opt_package=1
else
  opt_download=0 ; opt_config=0 ; opt_build=0 ; opt_package=0
  for i in $@ ; do
    case $i in
    download) opt_download=1 ;;
    config) opt_config=1 ;;
    build) opt_build=1 ;;
    package) opt_package=1 ;;
    esac
  done
fi
if [ $opt_download -eq 1 ] ; then
  for i in $url ; do
    if [ ! -f ${i##*/} ] ; then
      wget $i
    fi
  done
  for i in $verify ; do
    if [ ! -f ${i##*/} ] ; then
      wget $i
    fi
  done
  for i in $verify ; do
    case ${i##*.} in
    asc) gpg2 --verify ${i##*/} ;;
    sig) gpg2 --verify ${i##*/} ;;
    sha256sum) verify_checksum "sha256sum" ;;
    esac
    if [ $? -ne 0 ]; then
      echo "archive verify was failed."
      exit 1
    else
      echo "archive verify was successed."
    fi
  done
  for i in $url ; do
    case ${i##*.} in
    gz) tar xvpzf ${i##*/} ;;
    bz2) tar xvpjf ${i##*/} ;;
    *) tar xvpf ${i##*/} ;;
    esac
  done
fi

if [ $opt_config -eq 1 ] ; then
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    if [ -d ${B[$i]} ] ; then rm -rf ${B[$i]} ; fi ; cp -a ${S[$i]} ${B[$i]}
  done
######################################################################
# * ./configure を行う前に適用したい設定やパッチなどがある場合はここに
#   記述します。
######################################################################
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    for patch in $patchfiles ; do
       echo "patch -p0 < $patch"
       patch -p0 < $W/$patch
    done

    #mkdir -p ../python2-path
    #ln -sf /usr/bin/python ../python2-path

    #sed -i '/nacl_test_data\.gyp/d' chrome/chrome_tests.gypi
    #sed -i '/python_ver/s/2\.6/2\.7/' build/common.gypi 
    if [ $arch = "x86_64" ]; then
        sed -i "/system_libdir/s/'lib'/'lib64'/" build/common.gypi
    fi

    chromium_conf=(
        -Dtarget_arch=$TARGETARCH
        -Dwerror=
        -Dclang=0
        -Dclang_use_chrome_plugins=0
        -Ddisable_nacl=1
        -Dpython_ver=2.7
        -Dlinux_link_gsettings=1
        -Dlinux_link_libpci=1
	-Dlinux_link_libspeechd=1
        -Dlinux_link_pulseaudio=1
        -Dlinux_strip_binary=1
        -Dlinux_use_gold_binary=0
        -Dlinux_use_gold_flags=0
        -Dlogging_like_official_build=1
        -Dlibspeechd_h_prefix=speech-dispatcher/
        -Dffmpeg_branding=Chrome
        -Dproprietary_codecs=1
        -Duse_system_bzip2=1
        -Duse_system_flac=1
        -Duse_system_ffmpeg=0
        -Duse_system_harfbuzz=1
        -Duse_system_libevent=1
        -Duse_system_libjpeg=1
        -Duse_system_libpng=0
        -Duse_system_libxml=1
        -Duse_system_snappy=0
        -Duse_system_ssl=0
        -Duse_system_xdg_utils=1
        -Duse_system_yasm=1
        -Duse_system_zlib=0
        -Duse_mojo=0
        -Duse_gconf=0
        -Ddisable_glibc=0
        -Dlinux_link_kerberos=1
        -Dldflags="$BUILDLDFLAGS"
        -Drelease_extra_cflags="$BUILDCFLAGS")
#        -Duse_system_icu=0
#        -Duse_system_webp=0
#        -Duse_system_opus=0
#        -Ddisable_pnacl=1
#        -Dlinux_link_gnome_keyring=0
#        -Dno_strict_aliasing=1
#        -Duse_gnome_keyring=0
#        -Duse_kerberos=1
#        -Duse_system_libxslt=1
#        -Dlinux_use_tcmalloc=0


    build/linux/unbundle/replace_gyp_files.py "${chromium_conf[@]}"
    #build/gyp_chromium -f make --depth=. "${chromium_conf[@]}"
    build/gyp_chromium --depth=. "${chromium_conf[@]}"

  done
fi
if [ $opt_build -eq 1 ] ; then
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}
    export CFLAGS="$BUILDCFLAGS" CXXFLAGS="$BUILDCFLAGS"
    ninja -C out/Release chrome chrome_sandbox chromedriver
  done
fi
if [ $opt_package -eq 1 ] ; then
  if [ `id -u` -ne 0 ] ; then
    read -p "Do you want to package as root? [y/N] " ans
    if [ "x$ans" == "xY" -o "x$ans" == "xy" ] ; then
      cd $W ; /bin/su -c "$0 package" ; exit
    fi
  fi
  if [ -d $P ] ; then rm -rf $P ; fi ; mkdir -p $P
  if [ -d $C ] ; then rm -rf $C ; fi ; mkdir -p $C
  touch $W/i.st ; sleep 1
  for i in `seq 0 $((${#B[@]} - 1))` ; do
    cd ${B[$i]}

    install -m 0755 -D out/Release/chrome $P/usr/${libdir}/chromium/chromium
    install -m4755 -o root -g root -D out/Release/chrome_sandbox $P/usr/${libdir}/chromium/chrome-sandbox
    install -m0755 -D out/Release/libffmpegsumo.so $P/usr/${libdir}/chromium

    cp out/Release/*.pak $P/usr/${libdir}/chromium/
    cp -a out/Release/locales $P/usr/${libdir}/chromium/
    cp out/Release/icudtl.dat $P/usr/${libdir}/chromium/
    cp -a out/Release/resources $P/usr/${libdir}/chromium/
    mkdir -p $P/usr/bin
    #( cd $P/usr/${libdir}/chromium/ ; ln -s chromium ../../bin/chromium )

    install -m 644 -D out/Release/chrome.1 $P/usr/share/man/man1/chromium.1

    install -m 644 -D $W/chromium.desktop $P/usr/share/applications/chromium.desktop

    for size in 22 24 48 64 128 256; do
        install -m 644 -D "chrome/app/theme/chromium/product_logo_$size.png" \
            "$P/usr/share/icons/hicolor/${size}x${size}/apps/chromium.png"
    done

    for size in 16 32; do
        install -m 644 -D "chrome/app/theme/default_100_percent/chromium/product_logo_$size.png" \
            "$P/usr/share/icons/hicolor/${size}x${size}/apps/chromium.png"
    done


  done
######################################################################
# * make install でコピーされないファイルがある場合はここに記述します。
######################################################################
  mkdir -p $P/usr/bin
  cat <<EOF > $P/usr/bin/chromium
if [[ -f /etc/default/chromium ]]; then
        . /etc/default/chromium
fi

CHROMIUM_FLAGS=\${CHROMIUM_USER_FLAGS:-\$CHROMIUM_FLAGS}

exec /usr/${libdir}/chromium/chromium \$CHROMIUM_FLAGS "\$@"
EOF
chmod 755 $P/usr/bin/chromium

mkdir -p $P/etc/default
cat <<EOF > $P/etc/default/chromium
# Disable Seccomp-BPF Sandbox because of crash on Plamo-5.0 (x86_64)
# --disable-seccomp-filter-sandbox option is refer to 
#   http://code.google.com/p/chromium/wiki/LinuxSandboxing
CHROMIUM_FLAGS="--disable-seccomp-filter-sandbox"
EOF

  mkdir -p $docdir/$src
  if [ -d $P/usr/share/omf ]; then
    mkdir -p $P/install
    for omf in $P/usr/share/omf/* ; do
      omf_name=`basename $omf`
      cat << EOF >> $P/install/initpkg
if [ -x /usr/bin/scrollkeeper-update ]; then
  scrollkeeper-update -p /var/lib/rarian -o /usr/share/omf/$omf_name
fi
EOF
    done
  fi

  if [ -d $P/etc/gconf/schemas ]; then
    mkdir -p $P/install
    for schema in $P/etc/gconf/schemas/* ; do
      cat << EOF >> $P/install/initpkg
if [ -x /usr/bin/gconftool-2 ]; then
    ( cd /etc/gconf/schemas ; GCONF_CONFIG_SOURCE=xml:merged:/etc/gconf/gconf.xml.defaults /usr/bin/gconftool-2 --makefile-install-rule `basename $schema` )
fi
EOF
    done
  fi

# remove locales except ja
# 
  for loc_dir in `find $P -name locale` ; do
    pushd $loc_dir
    for loc in * ; do
      if [ "$loc" != "ja" ]; then
        rm -rf $loc
      fi
    done
    popd
  done      

######################################################################
# path に lib があるバイナリは strip -g, ないバイナリは strip する
######################################################################
  cd $P
  #compress_all
  if [ -d $P/usr/share/man ]; then
    for mdir in `find $P/usr/share/man -name man[0-9mno] -type d`; do
      gzip_dir $mdir
    done
  fi
######################################################################
# * compress 対象以外で圧縮したいディレクトリやファイルがある場合はここ
#   に記述します(strip_{bin,lib}dir や gzip_{dir,one} を使います)。
# * 他のアーカイブから追加したいファイルがある場合はここに記述します。
######################################################################
  cd $W
  for i in `seq 0 $((${#DOCS[@]} - 1))` ; do
    for j in ${DOCS[$i]} ; do
      for k in ${S[$i]}/$j ; do
        install2 $k $docdir/${src[$i]}/${k#${S[$i]}/}
        touch -r $k $docdir/${src[$i]}/${k#${S[$i]}/}
        gzip_one $docdir/${src[$i]}/${k#${S[$i]}/}
      done
    done
    if [ $i -eq 0 ] ; then
      install $myname $docdir/$src
      gzip_one $docdir/$src/$myname
    else
      ln $docdir/$src/$myname.gz $docdir/${src[$i]}
    fi
    ( cd $docdir ; find ${src[$i]} -type d -exec touch -r $W/{} {} \; )
  done

  for patch in $patchfiles ; do
    cp $W/$patch $docdir/$src/$patch
    gzip_one $docdir/$src/$patch
  done

############################################################
#   /usr/share/doc 以下には一般ユーザのIDのままのファイルが
#   紛れこみがちなので
############################################################

  chk_me=`whoami | grep root`
  if [ "$chk_me.x" != ".x" ]; then
      chown -R root.root $P/usr/share/doc
  fi

######################################################################
# * convert 対象以外で刈り取りたいシンボリックリンクがある場合はここに
#   記述します(prune_symlink を使います)。
# * 完成した作業ディレクトリから tar イメージを作成する手順を以降に記述
#   します(こだわりを求めないなら単に makepkg でも良いです)。
######################################################################
# tar cvpf $pkg.tar -C $P `cd $P ; find usr/bin | tail -n+2`
# tar rvpf $pkg.tar -C $P `cd $P ; find usr/share/man/man1 | tail -n+2`
# tar rvpf $pkg.tar -C $P usr/share/doc/$src
# touch -t `date '+%m%d0900'` $pkg.tar ; gzip $pkg.tar ; touch $pkg.tar.gz
# mv $pkg.tar.gz $pkg.tgz
  cd $P
  /sbin/makepkg ../$pkg.$compress <<EOF
y
1
EOF

fi
